MODULE alice (in0, in1, inkey, out0, out1, outkey)
VAR
    st : { request, wait, ack, confirm, finish };
    nonce : { NONE, Na, Nb, Ne };
ASSIGN
    init (st) := request;
    next (st) := case
                    st = request                                 : wait;       
                    st = wait & in0 = Na & in1 = Nb & inkey = Ka : ack;     -- (2A)
                    st = ack                                     : confirm;     
                    st = confirm & out0 = Nb & outkey = Ke       : finish;  -- (3A)
                    TRUE                                         : st;
                 esac;

    init (nonce) := NONE;
    next (nonce) := case
                        st = wait & in0 = Na & in1 = Nb & inkey = Ka : in1;     -- nonce = Nb
                        TRUE                                         : nonce;
                    esac;

    init (out0) := NONE;
    next (out0) := case
                        st = request : Na;      -- (1A)
                        st = confirm : nonce;   -- (3A)
                        TRUE         : out0;
                   esac;

    init (out1) := NOONE;
    next (out1) := case
                        st = request : Ia;      -- (1A)
                        st = confirm : NOONE;   -- (3A)
                        TRUE         : out1;
                   esac;

    init (outkey) := NOKEY;
    next (outkey) := case
                        st = request : Ke;
                        TRUE         : outkey; 
                     esac;
FAIRNESS running;

MODULE bob (in0, in1, inkey, out0, out1, outkey)
VAR
    st : { wait, receive, confirm, done };
    nonce : { NONE, Na, Nb, Ne };
    other : { NOONE, Ia, Ib, Ie };
ASSIGN
    init (st) := wait;
    next (st) := case
                    st = wait & in0 = Na & in1 = Ia & inkey = Kb : receive;     -- (1B)
                    st = receive                                 : confirm;
                    st = confirm & in0 = Nb & inkey = Kb         : done;  -- (3B)
                    TRUE                                         : st;
                 esac;

    init (nonce) := NONE;
    next (nonce) := case
                        st = wait & in0 = Na & in1 = Ia & inkey = Kb : in0;     -- nonce = Na
                        TRUE                                         : nonce;
                    esac;

    init (other) := NOONE;
    next (other) := case
                        st = wait & in0 = Na & in1 = Ia & inkey = Kb : in1;     -- other = Ia
                        TRUE                                         : other;
                    esac;

    init (out0) := NONE;
    next (out0) := case
                        st = confirm : nonce;   -- (2B)
                        TRUE         : out0;
                   esac;

    init (out1) := NOONE;
    next (out1) := case
                        st = confirm : Nb;      -- (2B)
                        TRUE         : out1;
                   esac;

    init (outkey) := NOKEY;
    next (outkey) := case
                        st = confirm & other = Ia : Ka;    
                        TRUE                      : outkey;
                     esac;
FAIRNESS running;

MODULE eve (in0A, in1A, inkeyA, out0A, out1A, outkeyA, 
            in0B, in1B, inkeyB, out0B, out1B, outkeyB)
VAR
    st : { waitA, ackA, cnfA,  
           waitB, ackB, cnfB, finish };
    nonce : { NONE, Na, Nb };
    other : { NOONE, Nb, Ia };
ASSIGN
    init (st) := waitA;
    next (st) := case
                    st = waitA & in0A = Na & in1A = Ia & inkeyA = Ke                        : ackA;      -- A -> E: {Na, Ia}Ke
                    st = ackA                                                               : cnfA;
                    st = cnfA & out0B = Na & out1B = Ia & outkeyB = Kb                      : waitB;     -- E -> B: {Na, Ia}Kb
                    st = waitB & in0B = Na & in1B = Nb & inkeyB = Ka                        : ackB;      -- (2B)
                    st = ackB                                                               : cnfB;   
                    st = cnfB & out0A = Na & out1A = Nb & outkeyA = Ka                      : waitA;     -- (2A)
                    st = waitA & in0A = Nb & inkeyA = Ke                                    : ackA;      -- (3A)  
                    st = ackA                                                               : cnfA;
                    st = cnfA & out0B = Nb & outkeyB = Kb                                   : finish;    -- (3B)
                    TRUE                                                                    : st;
                 esac;

    init (nonce) := NONE;
    next (nonce) := case
                        st = waitA & in0A = Na & in1A = Ia & inkeyA = Ke : in0A;    -- nonce = Na
                        st = waitB & in0B = Na & in1B = Nb & inkeyB = Ka : in0B;    -- nonce = Na
                        st = waitA & in0A = Nb & inkeyA = Ke             : in0A;    -- nonce = Nb
                        TRUE                                             : nonce;
                    esac;

    init (other) := NOONE;
    next (other) := case
                        st = waitA & in0A = Na & in1A = Ia & inkeyA = Ke : in1A;    -- other = Ia
                        st = waitB & in0B = Na & in1B = Nb & inkeyB = Ka : in1B;    -- other = Nb
                        TRUE                                             : other;
                    esac;

    -- A part

    init (out0A) := NONE;
    next (out0A) := case
                        st = cnfB     : nonce;      -- (2A)
                        TRUE          : out0A;    
                    esac;

    init (out1A) := NOONE;
    next (out1A) := case
                        st = cnfB     : other;      -- (2A)
                        TRUE          : out1A;
                    esac;

    init (outkeyA) := NOKEY;
    next (outkeyA) := case
                        st = cnfB & other = Nb     : Ka;        -- turning the key on
                        TRUE                       : outkeyA;
                      esac;  

    -- B part

    init (out0B) := NONE;
    next (out0B) := case
                        st = cnfA     : nonce;      -- (1B)
                        TRUE          : out0B;
                    esac;

    init (out1B) := NOONE;
    next (out1B) := case
                        st = cnfA     : other;      -- (1B)
                        TRUE          : out1B;
                    esac;

    init (outkeyB) := NOKEY;
    next (outkeyB) := case
                        st = cnfA & other = Ia     : Kb;        -- turning the key on
                        TRUE                       : outkeyB;
                      esac;
FAIRNESS running;

MODULE main 
VAR
    
    a_in0 : { NONE, Na, Nb, Ia };
    a_in1 : { NOONE, Na, Nb, Ia };
    a_out0 : { NONE, Na, Nb, Ne };
    a_out1 : { NOONE, Ia, Ib, Ie };
    a_inkey : { NOKEY, Ka, Kb, Ke };
    a_outkey : { NOKEY, Ka, Kb, Ke };
    b_in0 : { NONE, Na, Nb, Ne };
    b_in1 : { NOONE, Ia, Ib, Nb };
    b_out0 : { NONE, Na, Nb, Ne };
    b_out1 : { NOONE, Na, Nb, Ne };
    b_inkey : { NOKEY, Ka, Kb, Ke };
    b_outkey : { NOKEY, Ka, Kb, Ke };
    a : process alice (a_in0, a_in1, a_inkey, a_out0, a_out1, a_outkey);
    b : process bob (b_in0, b_in1, b_inkey, b_out0, b_out1, b_outkey);
    e : process eve (a_out0, a_out1, a_outkey, a_in0, a_in1, a_inkey,
                     b_out0, b_out1, b_outkey, b_in0, b_in1, b_inkey);
FAIRNESS running;

LTLSPEC F (a.st = finish & b.st = finish & e.st = finish)